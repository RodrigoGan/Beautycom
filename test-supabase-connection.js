// Script para testar a conex√£o com o Supabase
// Execute: node test-supabase-connection.js

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Carregar vari√°veis de ambiente
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

console.log('üîç Testando conex√£o com Supabase...')
console.log('URL:', supabaseUrl)
console.log('Key:', supabaseKey ? `${supabaseKey.substring(0, 20)}...` : 'N√ÉO ENCONTRADA')

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!')
  console.log('Verifique se o arquivo .env existe e cont√©m:')
  console.log('VITE_SUPABASE_URL=sua_url_aqui')
  console.log('VITE_SUPABASE_ANON_KEY=sua_chave_aqui')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testConnection() {
  try {
    console.log('\nüì° Testando conex√£o b√°sica...')
    
    // Teste 1: Verificar se consegue acessar a tabela users
    console.log('1. Testando acesso √† tabela users...')
    const { data: testData, error: testError } = await supabase
      .from('users')
      .select('id')
      .limit(1)
    
    if (testError) {
      console.error('‚ùå Erro ao acessar tabela users:', testError.message)
      console.error('C√≥digo:', testError.code)
      console.error('Detalhes:', testError.details)
    } else {
      console.log('‚úÖ Tabela users acess√≠vel')
    }
    
    // Teste 2: Contar usu√°rios
    console.log('\n2. Contando usu√°rios...')
    const { count, error: countError } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true })
    
    if (countError) {
      console.error('‚ùå Erro ao contar usu√°rios:', countError.message)
    } else {
      console.log(`‚úÖ Total de usu√°rios: ${count}`)
    }
    
    // Teste 3: Buscar alguns usu√°rios
    console.log('\n3. Buscando usu√°rios...')
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, name, nickname, user_type')
      .limit(5)
    
    if (usersError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', usersError.message)
    } else {
      console.log('‚úÖ Usu√°rios encontrados:', users?.length || 0)
      if (users && users.length > 0) {
        console.log('Primeiro usu√°rio:', users[0])
      }
    }
    
    // Teste 4: Testar filtros
    console.log('\n4. Testando filtros...')
    const { data: filteredUsers, error: filterError } = await supabase
      .from('users')
      .select('id, name, user_type')
      .eq('user_type', 'profissional')
      .limit(3)
    
    if (filterError) {
      console.error('‚ùå Erro ao filtrar usu√°rios:', filterError.message)
    } else {
      console.log(`‚úÖ Profissionais encontrados: ${filteredUsers?.length || 0}`)
    }
    
    // Teste 5: Verificar pol√≠ticas RLS
    console.log('\n5. Verificando pol√≠ticas RLS...')
    const { data: rlsTest, error: rlsError } = await supabase
      .from('users')
      .select('id')
      .limit(1)
    
    if (rlsError && rlsError.code === '42501') {
      console.error('‚ùå Problema com pol√≠ticas RLS:', rlsError.message)
      console.log('üí° Execute o script verificar_rls_users.sql no Supabase SQL Editor')
    } else if (rlsError) {
      console.error('‚ùå Outro erro:', rlsError.message)
    } else {
      console.log('‚úÖ Pol√≠ticas RLS funcionando')
    }
    
    console.log('\nüéâ Teste conclu√≠do!')
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message)
    console.error('Stack:', error.stack)
  }
}

testConnection() 