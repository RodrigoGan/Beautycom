-- =====================================================
-- ATUALIZA√á√ÉO DO BANCO DE DADOS BEAUTYCOM
-- =====================================================

-- HABILITAR EXTENS√ïES NECESS√ÅRIAS
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- =====================================================
-- 1. ATUALIZAR TABELA USERS
-- =====================================================

-- Adicionar campos do cadastro (Etapa 1)
ALTER TABLE users ADD COLUMN IF NOT EXISTS profile_photo TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS nickname TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS phone TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS user_type TEXT CHECK (user_type IN ('usuario', 'profissional'));

-- Adicionar campos de endere√ßo (Etapa 2)
ALTER TABLE users ADD COLUMN IF NOT EXISTS cep TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS logradouro TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS numero TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS complemento TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS bairro TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS cidade TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS uf TEXT;

-- Adicionar array de categorias (Etapa 3)
ALTER TABLE users ADD COLUMN IF NOT EXISTS categories UUID[] DEFAULT '{}';

-- Criar √≠ndice √∫nico para nickname
CREATE UNIQUE INDEX IF NOT EXISTS idx_users_nickname ON users(nickname) WHERE nickname IS NOT NULL;

-- =====================================================
-- 2. CRIAR TABELA CATEGORIES (HIER√ÅRQUICA)
-- =====================================================

CREATE TABLE IF NOT EXISTS categories (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  description TEXT,
  icon TEXT,
  color TEXT,
  parent_id UUID REFERENCES categories(id) ON DELETE CASCADE,
  level INTEGER DEFAULT 1,
  is_active BOOLEAN DEFAULT true,
  sort_order INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Criar √≠ndices para performance
CREATE INDEX IF NOT EXISTS idx_categories_parent_id ON categories(parent_id);
CREATE INDEX IF NOT EXISTS idx_categories_level ON categories(level);
CREATE INDEX IF NOT EXISTS idx_categories_active ON categories(is_active);

-- =====================================================
-- 3. INSERIR CATEGORIAS INICIAIS
-- =====================================================

-- Categorias Pai (Level 1)
INSERT INTO categories (name, description, icon, color, level, sort_order) VALUES
('Cabelos Femininos', 'Servi√ßos especializados para cabelos femininos', 'üë©‚Äçü¶∞', '#FF69B4', 1, 1),
('Cabelos Masculinos', 'Servi√ßos especializados para cabelos masculinos', 'üë®‚Äçü¶±', '#4169E1', 1, 2),
('Maquiagem', 'T√©cnicas e produtos de maquiagem', 'üíÑ', '#FF1493', 1, 3),
('Unhas', 'Cuidados e decora√ß√£o de unhas', 'üíÖ', '#FF69B4', 1, 4),
('Barba', 'Cuidados e modelagem de barba', 'üßî', '#8B4513', 1, 5),
('Est√©tica Facial', 'Tratamentos faciais e limpeza de pele', '‚ú®', '#FFD700', 1, 6),
('Est√©tica Corporal', 'Tratamentos corporais e massagens', 'üí™', '#32CD32', 1, 7),
('Sobrancelhas', 'Design e modelagem de sobrancelhas', 'üëÅÔ∏è', '#800080', 1, 8),
('Tatuagem', 'T√©cnicas de tatuagem e piercings', 'üé®', '#000000', 1, 9),
('Depila√ß√£o', 'T√©cnicas de depila√ß√£o', 'ü™í', '#FF4500', 1, 10);

-- Categorias Filho (Level 2) - Exemplos para algumas categorias
INSERT INTO categories (name, description, icon, color, parent_id, level, sort_order) VALUES
-- Cabelos Femininos
('Cabelos Louros', 'Especializa√ß√£o em cabelos louros', 'üíõ', '#FFD700', (SELECT id FROM categories WHERE name = 'Cabelos Femininos'), 2, 1),
('Penteados', 'Cria√ß√£o de penteados especiais', 'üíá‚Äç‚ôÄÔ∏è', '#FF69B4', (SELECT id FROM categories WHERE name = 'Cabelos Femininos'), 2, 2),
('Colora√ß√£o', 'T√©cnicas de colora√ß√£o', 'üé®', '#FF1493', (SELECT id FROM categories WHERE name = 'Cabelos Femininos'), 2, 3),
('Tran√ßa', 'T√©cnicas de tran√ßa', 'üëß', '#8B4513', (SELECT id FROM categories WHERE name = 'Cabelos Femininos'), 2, 4),

-- Maquiagem
('Maquiagem Social', 'Maquiagem para eventos sociais', 'üëó', '#FF1493', (SELECT id FROM categories WHERE name = 'Maquiagem'), 2, 1),
('Maquiagem Art√≠stica', 'Maquiagem art√≠stica e criativa', 'üé≠', '#FF69B4', (SELECT id FROM categories WHERE name = 'Maquiagem'), 2, 2),
('Maquiagem de Noiva', 'Maquiagem especial para noivas', 'üë∞', '#FFD700', (SELECT id FROM categories WHERE name = 'Maquiagem'), 2, 3),

-- Unhas
('Unhas Acr√≠licas', 'Aplica√ß√£o de unhas acr√≠licas', 'üíé', '#FF69B4', (SELECT id FROM categories WHERE name = 'Unhas'), 2, 1),
('Nail Art', 'Decora√ß√£o art√≠stica de unhas', 'üé®', '#FF1493', (SELECT id FROM categories WHERE name = 'Unhas'), 2, 2),
('Unhas de Gel', 'Aplica√ß√£o de unhas de gel', 'üíÖ', '#FFD700', (SELECT id FROM categories WHERE name = 'Unhas'), 2, 3);

-- =====================================================
-- 4. CRIAR FUN√á√ïES √öTEIS
-- =====================================================

-- Fun√ß√£o para buscar categorias de um usu√°rio
CREATE OR REPLACE FUNCTION get_user_categories(user_uuid UUID)
RETURNS TABLE (
  id UUID,
  name TEXT,
  description TEXT,
  icon TEXT,
  color TEXT,
  level INTEGER
) AS $$
BEGIN
  RETURN QUERY
  SELECT c.id, c.name, c.description, c.icon, c.color, c.level
  FROM categories c
  WHERE c.id = ANY(
    SELECT unnest(categories) FROM users WHERE id = user_uuid
  )
  ORDER BY c.sort_order, c.name;
END;
$$ LANGUAGE plpgsql;

-- Fun√ß√£o para adicionar categoria ao usu√°rio
CREATE OR REPLACE FUNCTION add_user_category(user_uuid UUID, category_uuid UUID)
RETURNS BOOLEAN AS $$
BEGIN
  UPDATE users 
  SET categories = array_append(categories, category_uuid)
  WHERE id = user_uuid;
  
  RETURN FOUND;
END;
$$ LANGUAGE plpgsql;

-- Fun√ß√£o para remover categoria do usu√°rio
CREATE OR REPLACE FUNCTION remove_user_category(user_uuid UUID, category_uuid UUID)
RETURNS BOOLEAN AS $$
BEGIN
  UPDATE users 
  SET categories = array_remove(categories, category_uuid)
  WHERE id = user_uuid;
  
  RETURN FOUND;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- 5. CONFIGURAR RLS (ROW LEVEL SECURITY)
-- =====================================================

-- Habilitar RLS nas tabelas
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;

-- Pol√≠ticas para categories
CREATE POLICY "Categories s√£o vis√≠veis para todos" ON categories
  FOR SELECT USING (is_active = true);

CREATE POLICY "Apenas admins podem modificar categories" ON categories
  FOR ALL USING (auth.role() = 'admin');

-- =====================================================
-- 6. CRIAR √çNDICES PARA PERFORMANCE
-- =====================================================

-- √çndices para consultas comuns
CREATE INDEX IF NOT EXISTS idx_users_user_type ON users(user_type);
CREATE INDEX IF NOT EXISTS idx_users_categories ON users USING GIN(categories);

-- =====================================================
-- 7. COMENT√ÅRIOS PARA DOCUMENTA√á√ÉO
-- =====================================================

COMMENT ON TABLE categories IS 'Tabela hier√°rquica de categorias de servi√ßos/prefer√™ncias';
COMMENT ON COLUMN users.categories IS 'Array de UUIDs das categorias selecionadas pelo usu√°rio';
COMMENT ON COLUMN categories.parent_id IS 'Refer√™ncia para categoria pai (auto-relacionamento)';
COMMENT ON COLUMN categories.level IS 'N√≠vel na hierarquia: 1=pai, 2=filho, 3=neto';

-- =====================================================
-- FIM DO SCRIPT
-- ===================================================== 